version: '3.8'

name: sharding-repl-cache

services:
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
    - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
    - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    ports:
    - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    volumes:
    - shard1_1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27021", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    ports:
    - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    volumes:
    - shard1_2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27022", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    ports:
    - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.23
    volumes:
    - shard1_3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27023", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    ports:
    - "27031:27031"
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    volumes:
    - shard2_1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27031"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27031", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    ports:
    - "27032:27032"
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    volumes:
    - shard2_2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27032"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27032", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    ports:
    - "27033:27033"
    networks:
      app-network:
        ipv4_address: 173.17.0.33
    volumes:
    - shard2_3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27033"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--port", "27033", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  config_init:
    image: mongo:latest
    container_name: config_init
    depends_on:
      configSrv:
        condition: service_healthy
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    command: >
      bash -c "until mongo --host configSrv --port 27017 --eval 'print(\"waited for connection\")';
      do sleep 5; done &&
      mongo --host configSrv --port 27017 --eval 'rs.initiate({_id: \"config_server\", configsvr: true, members: [{ _id: 0, host: \"configSrv:27017\" }]})'"

  shard1_init:
    image: mongo:latest
    container_name: shard1_init
    depends_on:
      shard1_1:
        condition: service_healthy
      shard1_2:
        condition: service_healthy
      shard1_3:
        condition: service_healthy
    networks:
      app-network:
        ipv4_address: 173.17.0.24
    command: >
      bash -c "until mongo --host shard1_1 --port 27021 --eval 'print(\"waited for connection\")';
      do sleep 5; done &&
      mongo --host shard1_1 --port 27021 --eval 'rs.initiate({_id: \"shard1\", members: [{ _id: 0, host: \"shard1_1:27021\" }, { _id: 1, host: \"shard1_2:27022\" }, { _id: 2, host: \"shard1_3:27023\" }]})'"

  shard2_init:
    image: mongo:latest
    container_name: shard2_init
    depends_on:
      shard2_1:
        condition: service_healthy
      shard2_2:
        condition: service_healthy
      shard2_3:
        condition: service_healthy
    networks:
      app-network:
        ipv4_address: 173.17.0.34
    command: >
      bash -c "until mongo --host shard2_1 --port 27031 --eval 'print(\"waited for connection\")';
      do sleep 5; done &&
      mongo --host shard2_1 --port 27031 --eval 'rs.initiate({_id: \"shard2\", members: [{ _id: 0, host: \"shard2_1:27031\" }, { _id: 1, host: \"shard2_2:27032\" }, { _id: 2, host: \"shard2_3:27033\" }]})'"

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
    - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    depends_on:
      config_init:
        condition: service_completed_successfully
      shard1_init:
        condition: service_completed_successfully
      shard2_init:
        condition: service_completed_successfully
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: >
        bash -c "mongo --port 27020 --eval 'sh.addShard(\"shard1/shard1_1:27021,shard1_2:27022,shard1_3:27023\");
        sh.addShard(\"shard2/shard2_1:27031,shard2_2:27032,shard2_3:27033\");
        db.adminCommand({listShards: 1})'"
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
    - "6379:6379"
    volumes:
    - redis-data:/data
    networks:
      app-network:
        ipv4_address: 173.17.0.60
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    depends_on:
      mongos_router:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
    - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.50
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020/somedb"
      MONGODB_DATABASE_NAME: "somedb"
      MONGODB_COLLECTION_NAME: "helloDoc"
      REDIS_URL: "redis://redis:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
  shard2_1-data:
  shard2_2-data:
  shard2_3-data:
  redis-data: